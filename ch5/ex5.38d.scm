(load "ch5-compiler.scm")

(define (compile exp target linkage)
  (cond ((self-evaluating? exp)
         (compile-self-evaluating exp target linkage))
        ((quoted? exp) (compile-quoted exp target linkage))
        ((variable? exp)
         (compile-variable exp target linkage))
        ((assignment? exp)
         (compile-assignment exp target linkage))
        ((definition? exp)
         (compile-definition exp target linkage))
        ((if? exp) (compile-if exp target linkage))
        ((lambda? exp) (compile-lambda exp target linkage))
        ((begin? exp)
         (compile-sequence (begin-actions exp)
                           target
                           linkage))
        ((cond? exp) (compile (cond->if exp) target linkage))
	((memq (car exp) '(+ - * / =))
	 (compile-primitive exp target linkage))
        ((application? exp)
         (compile-application exp target linkage))
        (else
         (error "Unknown expression type -- COMPILE" exp))))

(define (compile-primitive exp target linkage)
  (define (compile-primitive-helper operands operation prev-val)
    (if (null? operands)
	(empty-instruction-sequence)
	(if prev-val
	    (append-instruction-sequences
	     (compile (car operands) 'arg2 'next)
	     (make-instruction-sequence '(val arg1 arg2) 
					'(arg1 val) 
					`((assign arg1 (reg val))
					  (assign val (op ,operation) (reg arg1) (reg arg2))))
	     (compile-primitive-helper (cdr operands) operation #t))
	    (append-instruction-sequences
	     (compile (car operands) 'arg1 'next)
	     (preserving '(arg1)
			 (compile (cadr operands) 'arg2 'next)
			 (make-instruction-sequence '(arg1 arg2) 
						    (list target)
						    `((assign val (op ,operation) (reg arg1) (reg arg2)))))
	     (compile-primitive-helper (cddr operands) operation #t)))))
  (end-with-linkage linkage
		    (preserving '(env)
				(compile-primitive-helper (cdr exp) (car exp) #f)
				(make-instruction-sequence '(val) (list target)
							   `((assign ,target (reg val)))))))

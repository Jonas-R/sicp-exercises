;; load this into amb evaluator

(define (queens)
  (let ((q1 (amb 1 2 3 4 5 6 7 8 9))
	(q2 (amb 1 2 3 4 5 6 7 8 9)))
    (require (safe? (cons q1 1) (cons q2 2)))
    (let ((q3 (amb 1 2 3 4 5 6 7 8 9)))
      (require (safe? (cons q1 1) (cons q3 3)))
      (require (safe? (cons q2 2) (cons q3 3)))
      (let ((q4 (amb 1 2 3 4 5 6 7 8 9)))
	(require (safe? (cons q1 1) (cons q4 4)))
	(require (safe? (cons q2 2) (cons q4 4)))
	(require (safe? (cons q3 3) (cons q4 4)))
	(let ((q5 (amb 1 2 3 4 5 6 7 8 9)))
	  (require (safe? (cons q1 1) (cons q5 5)))
	  (require (safe? (cons q2 2) (cons q5 5)))
	  (require (safe? (cons q3 3) (cons q5 5)))
	  (require (safe? (cons q4 4) (cons q5 5)))
	  (let ((q6 (amb 1 2 3 4 5 6 7 8 9)))
	    (require (safe? (cons q1 1) (cons q6 6)))
	    (require (safe? (cons q2 2) (cons q6 6)))
	    (require (safe? (cons q3 3) (cons q6 6)))
	    (require (safe? (cons q4 4) (cons q6 6)))
	    (require (safe? (cons q5 5) (cons q6 6)))
	    (let ((q7 (amb 1 2 3 4 5 6 7 8 9)))
	      (require (safe? (cons q1 1) (cons q7 7)))
	      (require (safe? (cons q2 2) (cons q7 7)))
	      (require (safe? (cons q3 3) (cons q7 7)))
	      (require (safe? (cons q4 4) (cons q7 7)))
	      (require (safe? (cons q5 5) (cons q7 7)))
	      (require (safe? (cons q6 6) (cons q7 7)))
	      (let ((q8 (amb 1 2 3 4 5 6 7 8 9)))
		(require (safe? (cons q1 1) (cons q8 8)))
		(require (safe? (cons q2 2) (cons q8 8)))
		(require (safe? (cons q3 3) (cons q8 8)))
		(require (safe? (cons q4 4) (cons q8 8)))
		(require (safe? (cons q5 5) (cons q8 8)))
		(require (safe? (cons q6 6) (cons q8 8)))
		(require (safe? (cons q7 7) (cons q8 8)))
		(list q1 q2 q3 q4 q5 q6 q7 q8)))))))))

(define (require p)
  (if (not p) (amb)))


(define (safe? coord1 coord2)
  (if (= (get-row coord1) (get-row coord2))
      false
      (if (= (abs (- (get-row coord1) (get-row coord2)))
	     (abs (- (get-col coord1) (get-col coord2))))
	  false
	  true)))


(define (get-row coord) (car coord))
(define (get-col coord) (cdr coord))

;; load this into amb evaluator
;; solution: downing is lorna's father

(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))

(define (yachts)
  (let ((gabrielle-owner 'barnacle)
        (lorna-owner 'moore)
	(rosalind-owner 'hall)
	(melissa-owner 'downing)
	(mary-owner 'parker)
	(gabrielle-father (amb 'downing 'hall))
	(melissa-father 'barnacle)
	(mary-father 'moore)
	(lorna-father (amb 'downing 'parker 'hall))
	(rosalind-father (amb 'downing 'parker)))
    (require (distinct? (list mary-father lorna-father rosalind-father melissa-father gabrielle-father)))
    (require (cond ((eq? lorna-father 'parker)
		    (eq? gabrielle-father 'moore))
		   ((eq? rosalind-father 'parker)
		    (eq? gabrielle-father 'hall))
		   (else false)))
    (list (list 'gabrielle-father gabrielle-father)
	  (list 'melissa-father melissa-father)
	  (list 'mary-father mary-father)
	  (list 'lorna-father lorna-father)
	  (list 'rosalind-father rosalind-father))))

;; 2nd version (Mary's father is unknown)
;; solutions: 
;; 1. ((gabrielle-father moore) (melissa-father barnacle) (mary-father hall) (lorna-father parker) (rosalind-father downing))
;; 2. ((gabrielle-father hall) (melissa-father barnacle) (mary-father moore) (lorna-father downing) (rosalind-father parker))
(define (yachts2)
  (let ((gabrielle-owner 'barnacle)
        (lorna-owner 'moore)
	(rosalind-owner 'hall)
	(melissa-owner 'downing)
	(mary-owner 'parker)
	(gabrielle-father (amb 'moore 'hall 'downing 'parker))
	(melissa-father 'barnacle)
	(mary-father (amb 'moore 'hall 'downing))
	(lorna-father (amb 'downing 'parker 'hall))
	(rosalind-father (amb 'moore 'downing 'parker)))
    (require (distinct? (list mary-father lorna-father rosalind-father melissa-father gabrielle-father)))
    (require (cond ((eq? lorna-father 'parker)
		    (eq? gabrielle-father 'moore))
		   ((eq? rosalind-father 'parker)
		    (eq? gabrielle-father 'hall))
		   (else false)))
    (list (list 'gabrielle-father gabrielle-father)
	  (list 'melissa-father melissa-father)
	  (list 'mary-father mary-father)
	  (list 'lorna-father lorna-father)
	  (list 'rosalind-father rosalind-father))))


(define (require p)
  (if (not p) (amb)))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp) 
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
	((let? exp) (eval (let->combination exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))

(define (let? exp) (tagged-list? exp 'let))
(define (let-definitions exp) (cadr exp))
(define (let-body exp) (cddr exp))

(define (named-let-var exp) (cadr exp))
(define (named-let-bindings exp) (caddr exp))
(define (named-let-body exp) (cadddr exp))

(define (let->combination exp)
  (if (pair? (cadr exp))
      ;; regular let
      (let ((vars (map car (let-definitions exp)))
	    (body (let-body exp))
	    (exps (map cadr (let-definitions exp))))
	(cons (make-lambda vars body)
	      exps))
      ;; named let
      (let ((var (named-let-var exp))
	    (params (map car (named-let-bindings exp)))
	    (start-values (map cadr (named-let-bindings exp)))
	    (body (named-let-body exp)))
	(list 'begin
	      (list 'define (cons var params) body)
	      (cons var start-values)))))

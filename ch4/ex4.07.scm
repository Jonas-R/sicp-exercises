(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp) 
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
	((let? exp) (eval (let->combination exp) env))
	((let*? exp) (eval (let*->nested-lets exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))

(define (let*->nested-lets exp)
  (define (make-let def body)
    (append (list 'let (list def)) body))
  (define (nested-lets defs body)
    (if (null? defs)
	body
	(list (make-let (car defs)
			(nested-lets (cdr defs) body)))))
  (car (nested-lets (let-definitions exp) (let-body exp))))
  

(define (let*? exp) (tagged-list? exp 'let*))


(define (let? exp) (tagged-list? exp 'let))
(define (let-definitions exp) (cadr exp))
(define (let-body exp) (cddr exp))

(define (let->combination exp)
  (let ((vars (map car (let-definitions exp)))
	(body (let-body exp))
	(exps (map cadr (let-definitions exp))))
    (cons (make-lambda vars body)
	  exps)))
